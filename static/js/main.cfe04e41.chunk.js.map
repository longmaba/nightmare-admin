{"version":3,"sources":["pages/HeroGenerator.js","pages/LevelEditor.js","MainMenu.js","App.js","reportWebVitals.js","index.js"],"names":["layout","labelCol","span","wrapperCol","buttonItemLayout","offset","attackLayout","convert2Dto1D","array","newArr","i","length","concat","styles","cell","width","height","borderWidth","backgroundColor","border","justifyContent","textAlign","cursor","HeroGenerator","Form","useForm","form","useState","undefined","heroJson","setHeroJson","Array","fill","attackRange","setAttackRange","purifyRange","setPurifyRange","onFinish","values","name","model","hp","attack","SP","cooldown","redeployTime","respawnTime","stats","attackUp","purifyGroundsUp","Item","label","placeholder","style","map","d","display","flexDirection","data","k","onClick","x","y","tmp","tmp2","onClickAttackRange","onClickPurifyRange","type","htmlType","value","JSON","stringify","Title","Typography","colors","console","log","push","reverseArray","cloneArr","LevelEditor","levelJSON","setLevelJSON","terrainData","setTerrainData","protectorStone","setProtectorStone","monsterGate","setMonsterGate","selectedTerrain","setSelectedTerrain","amount","interval","beginAt","paths","monsterPaths","mobWave","setMobWave","onEditingMobWave","e","tmpWave","target","attributes","core","protectorRemoved","filter","monsterRemoved","protectTmp","monsterTmp","onClickLevelRange","marginLeft","maxWidth","Group","onChange","parseInt","wave","level","tmpPaths","onClickMonsterPath","marginTop","clearMonsterPath","clearPaths","filtered","index","onClickRemoveWave","onClickAddNewWave","Header","Layout","Content","Footer","Sider","SiderDemo","state","collapsed","onCollapse","setState","this","minHeight","collapsible","className","theme","defaultSelectedKeys","mode","icon","UserAddOutlined","to","padding","margin","path","React","Component","App","MainMenu","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cfe04e41.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Form, Input, Button, InputNumber } from 'antd';\r\nimport TextArea from 'antd/lib/input/TextArea';\r\n\r\nconst layout = {\r\n  labelCol: { span: 4 },\r\n  wrapperCol: { span: 4 },\r\n};\r\n\r\nconst buttonItemLayout = {\r\n  wrapperCol: {\r\n    span: 14,\r\n    offset: 2,\r\n  },\r\n};\r\n\r\nconst attackLayout = {\r\n  wrapperCol: {\r\n    span: 14,\r\n  },\r\n};\r\n\r\nconst convert2Dto1D = (array) => {\r\n  let newArr = [];\r\n\r\n  for (var i = 0; i < array.length; i++) {\r\n    newArr = newArr.concat(array[i]);\r\n  }\r\n\r\n  for (var i = 0; i < newArr.length; i++) {\r\n    newArr[i] = newArr[i] ? 1 : 0;\r\n  }\r\n\r\n  return newArr;\r\n};\r\n\r\nconst HeroGenerator = () => {\r\n  const [form] = Form.useForm();\r\n  const [heroJson, setHeroJson] = useState(undefined);\r\n  const [attackRange, setAttackRange] = useState(\r\n    new Array(9).fill(new Array(9).fill(false))\r\n  );\r\n\r\n  const [purifyRange, setPurifyRange] = useState(\r\n    new Array(9).fill(new Array(9).fill(false))\r\n  );\r\n\r\n  const onClickAttackRange = (x, y) => {\r\n    let tmp = [...attackRange];\r\n    let tmp2 = [...tmp[y]];\r\n    tmp2[x] = !attackRange[y][x];\r\n    tmp[y] = tmp2;\r\n    setAttackRange(tmp);\r\n  };\r\n\r\n  const onClickPurifyRange = (x, y) => {\r\n    let tmp = [...purifyRange];\r\n    let tmp2 = [...tmp[y]];\r\n    tmp2[x] = !purifyRange[y][x];\r\n    tmp[y] = tmp2;\r\n    setPurifyRange(tmp);\r\n  };\r\n\r\n  const onFinish = (values) => {\r\n    const {\r\n      name,\r\n      model,\r\n      hp,\r\n      attack,\r\n      SP,\r\n      cooldown,\r\n      redeployTime,\r\n      respawnTime,\r\n    } = values;\r\n    setHeroJson({\r\n      name,\r\n      model,\r\n      stats: {\r\n        hp,\r\n        attack,\r\n        SP,\r\n        cooldown,\r\n        redeployTime,\r\n        respawnTime,\r\n        attackUp: convert2Dto1D(attackRange),\r\n        purifyGroundsUp: convert2Dto1D(purifyRange),\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form {...layout} layout={'horizontal'} form={form} onFinish={onFinish}>\r\n        <Form.Item label='Name' name='name'>\r\n          <Input placeholder={`Hero's name`} />\r\n        </Form.Item>\r\n        <Form.Item label='Prefab' name='model'>\r\n          <Input placeholder={`Model's name`} />\r\n        </Form.Item>\r\n        <Form.Item label='HP' name='hp'>\r\n          <InputNumber placeholder={`Hero's HP`} />\r\n        </Form.Item>\r\n        <Form.Item label='Attack' name='attack'>\r\n          <InputNumber placeholder={`Attack damage`} />\r\n        </Form.Item>\r\n        <Form.Item label='SP' name='SP'>\r\n          <InputNumber placeholder={`SP cost`} />\r\n        </Form.Item>\r\n        <Form.Item label='Cooldown' name='cooldown'>\r\n          <InputNumber placeholder={`Cooldown`} />\r\n        </Form.Item>\r\n        <Form.Item label='Redeploy Time' name='redeployTime'>\r\n          <InputNumber placeholder={`Redeploy time`} />\r\n        </Form.Item>\r\n        <Form.Item label='Respawn Time' name='respawnTime'>\r\n          <InputNumber placeholder={`Respawn time`} />\r\n        </Form.Item>\r\n        <Form.Item label='Attack Range' name='attackRange' {...attackLayout}>\r\n          <div style={{}}>\r\n            {attackRange.map((d, i) => {\r\n              return (\r\n                <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                  {d.map((data, k) => (\r\n                    <div\r\n                      style={{\r\n                        ...styles.cell,\r\n                        backgroundColor:\r\n                          (k === 4) & (i === 4)\r\n                            ? '#ffc069'\r\n                            : data\r\n                            ? '#69c0ff'\r\n                            : '#f0f0f0',\r\n                      }}\r\n                      onClick={() => {\r\n                        if (k !== 4 || i !== 4) {\r\n                          onClickAttackRange(k, i);\r\n                        }\r\n                      }}\r\n                    ></div>\r\n                  ))}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </Form.Item>\r\n        <Form.Item label='Purify Range' name='purifyRange' {...attackLayout}>\r\n          <div style={{}}>\r\n            {purifyRange.map((d, i) => {\r\n              return (\r\n                <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                  {d.map((data, k) => (\r\n                    <div\r\n                      style={{\r\n                        ...styles.cell,\r\n                        backgroundColor:\r\n                          (k === 4) & (i === 4)\r\n                            ? '#ffc069'\r\n                            : data\r\n                            ? '#69c0ff'\r\n                            : '#f0f0f0',\r\n                      }}\r\n                      onClick={() => {\r\n                        if (k !== 4 || i !== 4) {\r\n                          onClickPurifyRange(k, i);\r\n                        }\r\n                      }}\r\n                    ></div>\r\n                  ))}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </Form.Item>\r\n        <Form.Item {...buttonItemLayout}>\r\n          <Button type='primary' htmlType='submit'>\r\n            Submit\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n      <TextArea value={JSON.stringify(heroJson)} />\r\n    </>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  cell: {\r\n    width: 30,\r\n    height: 30,\r\n    borderWidth: 1,\r\n    backgroundColor: 'white',\r\n    border: '1px dashed rgba(1, 1, 1, .35)',\r\n    justifyContent: 'center',\r\n    textAlign: 'center',\r\n    cursor: 'default',\r\n  },\r\n};\r\n\r\nexport default HeroGenerator;\r\n","import React, { useState } from 'react';\r\n\r\nimport { Form, Input, Button, Radio, Typography } from 'antd';\r\nimport TextArea from 'antd/lib/input/TextArea';\r\n\r\nconst { Title } = Typography;\r\n\r\nconst colors = [\r\n  '#f0f0f0',\r\n  '#876800',\r\n  '#876800',\r\n  '#d46b08',\r\n  '#d46b08',\r\n  '#262626',\r\n  '#9254de',\r\n  '#13c2c2',\r\n];\r\n\r\nconst layout = {\r\n  labelCol: { span: 4 },\r\n  wrapperCol: { span: 4 },\r\n};\r\n\r\nconst buttonItemLayout = {\r\n  wrapperCol: {\r\n    span: 14,\r\n    offset: 2,\r\n  },\r\n};\r\n\r\nconst attackLayout = {\r\n  wrapperCol: {\r\n    span: 14,\r\n  },\r\n};\r\n\r\nconst convert2Dto1D = (array) => {\r\n  let newArr = [];\r\n  console.log(array);\r\n  for (var i = 0; i < array.length; i++) {\r\n    for (let k = 0; k < array[i].length; k++) {\r\n      newArr.push(array[i][k]);\r\n    }\r\n  }\r\n\r\n  console.log(newArr);\r\n  return newArr;\r\n};\r\n\r\nconst reverseArray = (array) => {\r\n  let cloneArr = [];\r\n  for (let i = 0; i < array.length; i++) {\r\n    cloneArr.push(array[array.length - 1 - i]);\r\n  }\r\n  return cloneArr;\r\n};\r\n\r\nconst LevelEditor = () => {\r\n  const [form] = Form.useForm();\r\n  const [levelJSON, setLevelJSON] = useState(undefined);\r\n  const [terrainData, setTerrainData] = useState(\r\n    new Array(9).fill(new Array(12).fill(1))\r\n  );\r\n\r\n  const [protectorStone, setProtectorStone] = useState([]);\r\n  const [monsterGate, setMonsterGate] = useState([]);\r\n  const [selectedTerrain, setSelectedTerrain] = useState(1);\r\n  const [mobWave, setMobWave] = useState([\r\n    {\r\n      name: 'Enemy',\r\n      amount: 0,\r\n      interval: 0,\r\n      beginAt: 0,\r\n      paths: [],\r\n      monsterPaths: new Array(9).fill(new Array(12).fill(0)),\r\n    },\r\n  ]);\r\n\r\n  const onFinish = (values) => {\r\n    const { width, height, core } = values;\r\n    setLevelJSON({\r\n      width,\r\n      height,\r\n      core,\r\n      terrainData: convert2Dto1D(reverseArray(terrainData)),\r\n      monsterGate,\r\n      protectorStone,\r\n      mobWave: mobWave.map(({ monsterPaths, ...rest }) => rest),\r\n      // monsterPath,\r\n    });\r\n  };\r\n\r\n  const onClickLevelRange = (x, y) => {\r\n    let tmp = [...terrainData];\r\n    let tmp2 = [...tmp[y]];\r\n    if (terrainData[y][x] === selectedTerrain) {\r\n      tmp2[x] = 0;\r\n      if (selectedTerrain === 7) {\r\n        let protectTmp = protectorStone;\r\n        let protectorRemoved = protectTmp.filter(\r\n          (d) => !(d.x === x && d.y === terrainData.length - 1 - y)\r\n        );\r\n        setProtectorStone(protectorRemoved);\r\n      }\r\n      if (selectedTerrain === 6) {\r\n        let monsterTmp = monsterGate;\r\n        let monsterRemoved = monsterTmp.filter(\r\n          (d) => !(d.x === x && d.y === terrainData.length - 1 - y)\r\n        );\r\n        setMonsterGate(monsterRemoved);\r\n      }\r\n    } else {\r\n      tmp2[x] = selectedTerrain;\r\n      if (selectedTerrain === 7) {\r\n        // Protector Stone\r\n        tmp2[x] = 1; // Default to Low Ground\r\n        let protectTmp = protectorStone;\r\n        protectTmp.push({ x, y: terrainData.length - 1 - y });\r\n        setProtectorStone(protectTmp);\r\n      }\r\n\r\n      if (selectedTerrain === 6) {\r\n        // Monster Gate\r\n        tmp2[x] = 1; // Default to Low Ground\r\n        let monsterTmp = monsterGate;\r\n        monsterTmp.push({ x, y: terrainData.length - 1 - y });\r\n        setMonsterGate(monsterTmp);\r\n      }\r\n    }\r\n    tmp[y] = tmp2;\r\n    setTerrainData(tmp);\r\n  };\r\n\r\n  const onClickMonsterPath = (x, y, i) => {\r\n    let tmpWave = [...mobWave];\r\n    let tmpPaths = tmpWave[i].paths;\r\n    tmpPaths.push({ x, y: terrainData.length - 1 - y });\r\n    tmpWave[i].paths = tmpPaths;\r\n    let tmp = [...tmpWave[i].monsterPaths];\r\n    let tmp2 = [...tmp[y]];\r\n    tmp2[x] = tmpPaths.length;\r\n    tmp[y] = tmp2;\r\n    tmpWave[i].monsterPaths = tmp;\r\n    setMobWave(tmpWave);\r\n  };\r\n\r\n  const clearPaths = (i) => {\r\n    let clearMonsterPath = new Array(9).fill(new Array(12).fill(0));\r\n    let paths = [];\r\n    let tmpWave = [...mobWave];\r\n    tmpWave[i].monsterPaths = clearMonsterPath;\r\n    tmpWave[i].paths = paths;\r\n    setMobWave(tmpWave);\r\n  };\r\n\r\n  const onClickAddNewWave = () => {\r\n    let tmpWave = [...mobWave];\r\n    tmpWave.push({\r\n      name: 'Enemy',\r\n      amount: 0,\r\n      interval: 0,\r\n      beginAt: 0,\r\n      paths: [],\r\n      monsterPaths: new Array(9).fill(new Array(12).fill(0)),\r\n    });\r\n    setMobWave(tmpWave);\r\n  };\r\n\r\n  const onClickRemoveWave = (i) => {\r\n    let tmpWave = [...mobWave];\r\n    let filtered = tmpWave.filter((value, index) => index !== i);\r\n    setMobWave(filtered);\r\n  };\r\n\r\n  const onEditingMobWave = (e, i) => {\r\n    let tmpWave = [...mobWave];\r\n    tmpWave[i][e.target.attributes.label.value] = e.target.value;\r\n    setMobWave(tmpWave);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form {...layout} layout={'horizontal'} form={form} onFinish={onFinish}>\r\n        <Form.Item label='Width' name='width'>\r\n          <Input placeholder={`Level's width`} />\r\n        </Form.Item>\r\n        <Form.Item label='Height' name='height'>\r\n          <Input placeholder={`Level's height`} />\r\n        </Form.Item>\r\n        <Form.Item label='Core' name='core'>\r\n          <Input placeholder={`Core's number`} />\r\n        </Form.Item>\r\n        <Form.Item label='Level Map' name='terrainData' {...attackLayout}>\r\n          <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n            <div>\r\n              {terrainData.map((d, i) => {\r\n                return (\r\n                  <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                    {d.map((data, k) => {\r\n                      let backgroundColor = colors[data];\r\n                      return (\r\n                        <div\r\n                          style={{\r\n                            ...styles.cell,\r\n                            backgroundColor,\r\n                          }}\r\n                          onClick={() => {\r\n                            onClickLevelRange(k, i);\r\n                          }}\r\n                        ></div>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n            <div style={{ marginLeft: 40, maxWidth: 240 }}>\r\n              <Radio.Group\r\n                onChange={(e) => setSelectedTerrain(parseInt(e.target.value))}\r\n              >\r\n                <Radio value='0'>\r\n                  {' '}\r\n                  <div\r\n                    style={{ ...styles.cell, backgroundColor: colors[0] }}\r\n                  ></div>\r\n                  Empty Tile\r\n                </Radio>\r\n                <Radio value='1'>\r\n                  {' '}\r\n                  <div\r\n                    style={{ ...styles.cell, backgroundColor: colors[1] }}\r\n                  ></div>\r\n                  Low Ground\r\n                </Radio>\r\n                <Radio value='3'>\r\n                  {' '}\r\n                  <div\r\n                    style={{ ...styles.cell, backgroundColor: colors[3] }}\r\n                  ></div>\r\n                  High Ground\r\n                </Radio>\r\n                <Radio value='5'>\r\n                  {' '}\r\n                  <div\r\n                    style={{ ...styles.cell, backgroundColor: colors[5] }}\r\n                  ></div>\r\n                  Wall\r\n                </Radio>\r\n                <Radio value='7'>\r\n                  {' '}\r\n                  <div\r\n                    style={{ ...styles.cell, backgroundColor: colors[7] }}\r\n                  ></div>\r\n                  Protector Stone\r\n                </Radio>\r\n                <Radio value='6'>\r\n                  {' '}\r\n                  <div\r\n                    style={{ ...styles.cell, backgroundColor: colors[6] }}\r\n                  ></div>\r\n                  Monster Gate\r\n                </Radio>\r\n              </Radio.Group>\r\n            </div>\r\n          </div>\r\n        </Form.Item>\r\n        <Form.Item label='Mob Waves' name='mobs'>\r\n          {mobWave.map((wave, i) => {\r\n            return (\r\n              <>\r\n                {' '}\r\n                <Title level={5}>Wave {i + 1}</Title>\r\n                <Form.Item label='Name'>\r\n                  <Input\r\n                    placeholder={`Monster's name`}\r\n                    label='name'\r\n                    onChange={(e) => onEditingMobWave(e, i)}\r\n                  />\r\n                </Form.Item>\r\n                <Form.Item label='Amount'>\r\n                  <Input\r\n                    placeholder={`Amount`}\r\n                    label='amount'\r\n                    onChange={(e) => onEditingMobWave(e, i)}\r\n                  />\r\n                </Form.Item>\r\n                <Form.Item label='Interval'>\r\n                  <Input\r\n                    placeholder={`Interval`}\r\n                    label='interval'\r\n                    onChange={(e) => onEditingMobWave(e, i)}\r\n                  />\r\n                </Form.Item>\r\n                <Form.Item label='Begin At'>\r\n                  <Input\r\n                    placeholder={`Start`}\r\n                    label='beginAt'\r\n                    onChange={(e) => onEditingMobWave(e, i)}\r\n                  />\r\n                </Form.Item>\r\n                <Form.Item label='Paths'>\r\n                  {terrainData.map((d, y) => {\r\n                    return (\r\n                      <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                        {d.map((data, x) => {\r\n                          let backgroundColor = colors[data];\r\n                          return (\r\n                            <div\r\n                              style={{\r\n                                ...styles.cell,\r\n                                backgroundColor,\r\n                              }}\r\n                              onClick={() => {\r\n                                onClickMonsterPath(x, y, i);\r\n                              }}\r\n                            >\r\n                              {wave.monsterPaths[y][x] !== 0\r\n                                ? wave.monsterPaths[y][x]\r\n                                : undefined}\r\n                            </div>\r\n                          );\r\n                        })}\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </Form.Item>\r\n                <Button\r\n                  style={{ marginTop: 20 }}\r\n                  type='primary'\r\n                  onClick={() => {\r\n                    clearPaths(i);\r\n                  }}\r\n                >\r\n                  Clear\r\n                </Button>\r\n                {mobWave.length > 1 && (\r\n                  <Button\r\n                    style={{ marginTop: 20, marginLeft: 20 }}\r\n                    type='primary'\r\n                    onClick={() => {\r\n                      onClickRemoveWave(i);\r\n                    }}\r\n                  >\r\n                    Remove Wave\r\n                  </Button>\r\n                )}\r\n              </>\r\n            );\r\n          })}\r\n          <Form.Item>\r\n            <Button\r\n              style={{ marginTop: 20 }}\r\n              type='primary'\r\n              onClick={() => onClickAddNewWave()}\r\n            >\r\n              Add New Wave\r\n            </Button>\r\n          </Form.Item>\r\n        </Form.Item>\r\n        <Form.Item {...buttonItemLayout}>\r\n          <Button type='primary' htmlType='submit'>\r\n            Submit\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n      <TextArea value={JSON.stringify(levelJSON)} />\r\n    </>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  cell: {\r\n    width: 30,\r\n    height: 30,\r\n    borderWidth: 1,\r\n    backgroundColor: 'white',\r\n    border: '1px dashed rgba(1, 1, 1, .35)',\r\n    justifyContent: 'center',\r\n    textAlign: 'center',\r\n    cursor: 'default',\r\n  },\r\n};\r\n\r\nexport default LevelEditor;\r\n","import React from 'react';\r\nimport { Layout, Menu, Breadcrumb } from 'antd';\r\nimport { UserAddOutlined } from '@ant-design/icons';\r\nimport HeroGenerator from './pages/HeroGenerator';\r\nimport LevelEditor from './pages/LevelEditor';\r\n\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\n\r\nconst { Header, Content, Footer, Sider } = Layout;\r\n\r\nclass SiderDemo extends React.Component {\r\n  state = {\r\n    collapsed: false,\r\n  };\r\n\r\n  onCollapse = (collapsed) => {\r\n    console.log(collapsed);\r\n    this.setState({ collapsed });\r\n  };\r\n\r\n  render() {\r\n    const { collapsed } = this.state;\r\n    return (\r\n      <Router>\r\n        <Layout style={{ minHeight: '100vh' }}>\r\n          <Sider collapsible collapsed={collapsed} onCollapse={this.onCollapse}>\r\n            <div className='logo' />\r\n            <Menu theme='dark' defaultSelectedKeys={['1']} mode='inline'>\r\n              <Menu.Item key='1' icon={<UserAddOutlined />}>\r\n                <Link to='/create-hero'>Create Hero</Link>\r\n              </Menu.Item>\r\n              <Menu.Item key='2' icon={<UserAddOutlined />}>\r\n                <Link to='/create-level'>Level Editor</Link>\r\n              </Menu.Item>\r\n            </Menu>\r\n          </Sider>\r\n          <Layout className='site-layout'>\r\n            <Header className='site-layout-background' style={{ padding: 0 }} />\r\n            <Content style={{ margin: '0 16px' }}>\r\n              <Switch>\r\n                <Route path='/create-hero'>\r\n                  <Breadcrumb style={{ margin: '16px 0' }}>\r\n                    <Breadcrumb.Item>Create Hero</Breadcrumb.Item>\r\n                  </Breadcrumb>\r\n                  <div\r\n                    className='site-layout-background'\r\n                    style={{ padding: 24, minHeight: 360 }}\r\n                  >\r\n                    <HeroGenerator />\r\n                  </div>\r\n                </Route>\r\n                <Route path='/create-level'>\r\n                  <Breadcrumb style={{ margin: '16px 0' }}>\r\n                    <Breadcrumb.Item>Level Editor</Breadcrumb.Item>\r\n                  </Breadcrumb>\r\n                  <div\r\n                    className='site-layout-background'\r\n                    style={{ padding: 24, minHeight: 360 }}\r\n                  >\r\n                    <LevelEditor />\r\n                  </div>\r\n                </Route>\r\n                <Route path='/'>\r\n                  <Breadcrumb style={{ margin: '16px 0' }}>\r\n                    <Breadcrumb.Item>Create Hero</Breadcrumb.Item>\r\n                  </Breadcrumb>\r\n                  <div\r\n                    className='site-layout-background'\r\n                    style={{ padding: 24, minHeight: 360 }}\r\n                  >\r\n                    <HeroGenerator />\r\n                  </div>\r\n                </Route>\r\n              </Switch>\r\n            </Content>\r\n            <Footer style={{ textAlign: 'center' }}>\r\n              Nightmare Garden ©2021 Created by longmaba\r\n            </Footer>\r\n          </Layout>\r\n        </Layout>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SiderDemo;\r\n","import React from 'react';\nimport './App.css';\nimport MainMenu from './MainMenu';\n\nconst App = () => <MainMenu />;\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}