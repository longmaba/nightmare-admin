{"version":3,"sources":["pages/HeroGenerator.js","pages/LevelEditor.js","MainMenu.js","App.js","reportWebVitals.js","index.js"],"names":["layout","labelCol","span","wrapperCol","buttonItemLayout","offset","attackLayout","convert2Dto1D","array","newArr","i","length","concat","styles","cell","width","height","borderWidth","backgroundColor","border","justifyContent","textAlign","cursor","HeroGenerator","Form","useForm","form","useState","undefined","heroJson","setHeroJson","Array","fill","attackRange","setAttackRange","purifyRange","setPurifyRange","onFinish","values","name","model","hp","attack","SP","cooldown","redeployTime","respawnTime","stats","attackUp","purifyGroundsUp","Item","label","placeholder","style","map","d","display","flexDirection","data","k","onClick","x","y","tmp","tmp2","onClickAttackRange","onClickPurifyRange","type","htmlType","value","JSON","stringify","Title","Typography","colors","push","convert1Dto2D","w","splice","reverseArray","cloneArr","LevelEditor","levelJSON","setLevelJSON","terrainData","setTerrainData","selectedTerrain","setSelectedTerrain","amount","interval","beginAt","paths","monsterPaths","mobWave","setMobWave","getGatewaysPos","mons","prot","onEditingMobWave","e","tmpWave","target","attributes","importJson","setImportJson","core","monsterGate","protectorStone","parse","terrain","monsterGates","protectorStones","tmpArray","console","log","getTerrainData","fillMonsterPath","margin","onChange","onClickLevelRange","marginLeft","maxWidth","Group","parseInt","wave","level","tmpPaths","onClickMonsterPath","marginTop","clearMonsterPath","clearPaths","filtered","filter","index","onClickRemoveWave","onClickAddNewWave","Header","Layout","Content","Footer","Sider","SiderDemo","state","collapsed","onCollapse","setState","this","minHeight","collapsible","className","theme","defaultSelectedKeys","mode","icon","UserAddOutlined","to","padding","path","React","Component","App","MainMenu","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5bac3149.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Form, Input, Button, InputNumber } from 'antd';\r\nimport TextArea from 'antd/lib/input/TextArea';\r\n\r\nconst layout = {\r\n  labelCol: { span: 4 },\r\n  wrapperCol: { span: 4 },\r\n};\r\n\r\nconst buttonItemLayout = {\r\n  wrapperCol: {\r\n    span: 14,\r\n    offset: 2,\r\n  },\r\n};\r\n\r\nconst attackLayout = {\r\n  wrapperCol: {\r\n    span: 14,\r\n  },\r\n};\r\n\r\nconst convert2Dto1D = (array) => {\r\n  let newArr = [];\r\n\r\n  for (var i = 0; i < array.length; i++) {\r\n    newArr = newArr.concat(array[i]);\r\n  }\r\n\r\n  for (var i = 0; i < newArr.length; i++) {\r\n    newArr[i] = newArr[i] ? 1 : 0;\r\n  }\r\n\r\n  return newArr;\r\n};\r\n\r\nconst HeroGenerator = () => {\r\n  const [form] = Form.useForm();\r\n  const [heroJson, setHeroJson] = useState(undefined);\r\n  const [attackRange, setAttackRange] = useState(\r\n    new Array(9).fill(new Array(9).fill(false))\r\n  );\r\n\r\n  const [purifyRange, setPurifyRange] = useState(\r\n    new Array(9).fill(new Array(9).fill(false))\r\n  );\r\n\r\n  const onClickAttackRange = (x, y) => {\r\n    let tmp = [...attackRange];\r\n    let tmp2 = [...tmp[y]];\r\n    tmp2[x] = !attackRange[y][x];\r\n    tmp[y] = tmp2;\r\n    setAttackRange(tmp);\r\n  };\r\n\r\n  const onClickPurifyRange = (x, y) => {\r\n    let tmp = [...purifyRange];\r\n    let tmp2 = [...tmp[y]];\r\n    tmp2[x] = !purifyRange[y][x];\r\n    tmp[y] = tmp2;\r\n    setPurifyRange(tmp);\r\n  };\r\n\r\n  const onFinish = (values) => {\r\n    const {\r\n      name,\r\n      model,\r\n      hp,\r\n      attack,\r\n      SP,\r\n      cooldown,\r\n      redeployTime,\r\n      respawnTime,\r\n    } = values;\r\n    setHeroJson({\r\n      name,\r\n      model,\r\n      stats: {\r\n        hp,\r\n        attack,\r\n        SP,\r\n        cooldown,\r\n        redeployTime,\r\n        respawnTime,\r\n        attackUp: convert2Dto1D(attackRange),\r\n        purifyGroundsUp: convert2Dto1D(purifyRange),\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form {...layout} layout={'horizontal'} form={form} onFinish={onFinish}>\r\n        <Form.Item label='Name' name='name'>\r\n          <Input placeholder={`Hero's name`} />\r\n        </Form.Item>\r\n        <Form.Item label='Prefab' name='model'>\r\n          <Input placeholder={`Model's name`} />\r\n        </Form.Item>\r\n        <Form.Item label='HP' name='hp'>\r\n          <InputNumber placeholder={`Hero's HP`} />\r\n        </Form.Item>\r\n        <Form.Item label='Attack' name='attack'>\r\n          <InputNumber placeholder={`Attack damage`} />\r\n        </Form.Item>\r\n        <Form.Item label='SP' name='SP'>\r\n          <InputNumber placeholder={`SP cost`} />\r\n        </Form.Item>\r\n        <Form.Item label='Cooldown' name='cooldown'>\r\n          <InputNumber placeholder={`Cooldown`} />\r\n        </Form.Item>\r\n        <Form.Item label='Redeploy Time' name='redeployTime'>\r\n          <InputNumber placeholder={`Redeploy time`} />\r\n        </Form.Item>\r\n        <Form.Item label='Respawn Time' name='respawnTime'>\r\n          <InputNumber placeholder={`Respawn time`} />\r\n        </Form.Item>\r\n        <Form.Item label='Attack Range' name='attackRange' {...attackLayout}>\r\n          <div style={{}}>\r\n            {attackRange.map((d, i) => {\r\n              return (\r\n                <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                  {d.map((data, k) => (\r\n                    <div\r\n                      style={{\r\n                        ...styles.cell,\r\n                        backgroundColor:\r\n                          (k === 4) & (i === 4)\r\n                            ? '#ffc069'\r\n                            : data\r\n                            ? '#69c0ff'\r\n                            : '#f0f0f0',\r\n                      }}\r\n                      onClick={() => {\r\n                        if (k !== 4 || i !== 4) {\r\n                          onClickAttackRange(k, i);\r\n                        }\r\n                      }}\r\n                    ></div>\r\n                  ))}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </Form.Item>\r\n        <Form.Item label='Purify Range' name='purifyRange' {...attackLayout}>\r\n          <div style={{}}>\r\n            {purifyRange.map((d, i) => {\r\n              return (\r\n                <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                  {d.map((data, k) => (\r\n                    <div\r\n                      style={{\r\n                        ...styles.cell,\r\n                        backgroundColor:\r\n                          (k === 4) & (i === 4)\r\n                            ? '#ffc069'\r\n                            : data\r\n                            ? '#69c0ff'\r\n                            : '#f0f0f0',\r\n                      }}\r\n                      onClick={() => {\r\n                        if (k !== 4 || i !== 4) {\r\n                          onClickPurifyRange(k, i);\r\n                        }\r\n                      }}\r\n                    ></div>\r\n                  ))}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </Form.Item>\r\n        <Form.Item {...buttonItemLayout}>\r\n          <Button type='primary' htmlType='submit'>\r\n            Submit\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n      <TextArea value={JSON.stringify(heroJson)} />\r\n    </>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  cell: {\r\n    width: 30,\r\n    height: 30,\r\n    borderWidth: 1,\r\n    backgroundColor: 'white',\r\n    border: '1px dashed rgba(1, 1, 1, .35)',\r\n    justifyContent: 'center',\r\n    textAlign: 'center',\r\n    cursor: 'default',\r\n  },\r\n};\r\n\r\nexport default HeroGenerator;\r\n","import React, { useState } from 'react';\r\n\r\nimport { Form, Input, Button, Radio, Typography } from 'antd';\r\nimport TextArea from 'antd/lib/input/TextArea';\r\n\r\nconst { Title } = Typography;\r\n\r\nconst colors = [\r\n  '#1f1f1f',\r\n  '#ffffff',\r\n  '#ffffff',\r\n  '#d9d9d9',\r\n  '#d9d9d9',\r\n  '#faad14',\r\n  '#cf1322',\r\n  '#1890ff',\r\n];\r\n\r\nconst layout = {\r\n  labelCol: { span: 4 },\r\n  wrapperCol: { span: 4 },\r\n};\r\n\r\nconst buttonItemLayout = {\r\n  wrapperCol: {\r\n    span: 14,\r\n    offset: 2,\r\n  },\r\n};\r\n\r\nconst attackLayout = {\r\n  wrapperCol: {\r\n    span: 14,\r\n  },\r\n};\r\n\r\nconst convert2Dto1D = (array) => {\r\n  let newArr = [];\r\n  for (var i = 0; i < array.length; i++) {\r\n    for (let k = 0; k < array[i].length; k++) {\r\n      if (array[i][k] === 7 || array[i][k] === 6) {\r\n        newArr.push(1);\r\n      } else {\r\n        newArr.push(array[i][k]);\r\n      }\r\n    }\r\n  }\r\n  return newArr;\r\n};\r\n\r\nconst convert1Dto2D = (array, w) => {\r\n  let newArr = [];\r\n  while (array.length) newArr.push(array.splice(0, w));\r\n  return newArr;\r\n};\r\n\r\nconst reverseArray = (array) => {\r\n  let cloneArr = [];\r\n  for (let i = 0; i < array.length; i++) {\r\n    cloneArr.push(array[array.length - 1 - i]);\r\n  }\r\n  return cloneArr;\r\n};\r\n\r\nconst getTerrainData = (terrain, monsterGates, protectorStones) => {\r\n  let tmpArray = reverseArray(convert1Dto2D(terrain, 12));\r\n  monsterGates.map((d) => {\r\n    tmpArray[tmpArray.length - 1 - d.y][d.x] = 6;\r\n  });\r\n  protectorStones.map((d) => {\r\n    tmpArray[tmpArray.length - 1 - d.y][d.x] = 7;\r\n  });\r\n  console.log(tmpArray);\r\n  return tmpArray;\r\n};\r\n\r\nconst fillMonsterPath = (paths) => {\r\n  let monsterPaths = new Array(108).fill(0);\r\n  for (let i = 0; i < paths.length; i++) {\r\n    monsterPaths[12 * (8 - paths[i].y) + paths[i].x] = i + 1;\r\n  }\r\n  return convert1Dto2D(monsterPaths, 12);\r\n};\r\n\r\nconst LevelEditor = () => {\r\n  const [form] = Form.useForm();\r\n  const [levelJSON, setLevelJSON] = useState(undefined);\r\n  const [terrainData, setTerrainData] = useState(\r\n    new Array(9).fill(new Array(12).fill(1))\r\n  );\r\n  const [selectedTerrain, setSelectedTerrain] = useState(1);\r\n  const [mobWave, setMobWave] = useState([\r\n    {\r\n      name: 'Enemy',\r\n      amount: 0,\r\n      interval: 0,\r\n      beginAt: 0,\r\n      paths: [],\r\n      monsterPaths: new Array(9).fill(new Array(12).fill(0)),\r\n    },\r\n  ]);\r\n\r\n  const onFinish = (values) => {\r\n    const { width, height, core } = values;\r\n    const { mons, prot } = getGatewaysPos(terrainData);\r\n    setLevelJSON({\r\n      width,\r\n      height,\r\n      core,\r\n      terrainData: convert2Dto1D(reverseArray(terrainData)),\r\n      monsterGate: mons,\r\n      protectorStone: prot,\r\n      mobWave: mobWave.map(({ monsterPaths, ...rest }) => rest),\r\n    });\r\n  };\r\n\r\n  const getGatewaysPos = (array) => {\r\n    let tmp = [...array];\r\n    let mons = [];\r\n    let prot = [];\r\n    for (let i = 0; i < tmp.length; i++) {\r\n      for (let k = 0; k < tmp[i].length; k++) {\r\n        if (tmp[i][k] === 7) {\r\n          prot.push({ x: k, y: tmp.length - 1 - i });\r\n        }\r\n        if (tmp[i][k] === 6) {\r\n          mons.push({ x: k, y: tmp.length - 1 - i });\r\n        }\r\n      }\r\n    }\r\n    return { mons, prot };\r\n  };\r\n\r\n  const onClickLevelRange = (x, y) => {\r\n    let tmp = [...terrainData];\r\n    let tmp2 = [...tmp[y]];\r\n    if (terrainData[y][x] === selectedTerrain) {\r\n      tmp2[x] = 1;\r\n    } else {\r\n      tmp2[x] = selectedTerrain;\r\n    }\r\n    tmp[y] = tmp2;\r\n    setTerrainData(tmp);\r\n  };\r\n\r\n  const onClickMonsterPath = (x, y, i) => {\r\n    let tmpWave = [...mobWave];\r\n    let tmpPaths = tmpWave[i].paths;\r\n    tmpPaths.push({ x, y: terrainData.length - 1 - y });\r\n    tmpWave[i].paths = tmpPaths;\r\n    let tmp = [...tmpWave[i].monsterPaths];\r\n    let tmp2 = [...tmp[y]];\r\n    tmp2[x] = tmpPaths.length;\r\n    tmp[y] = tmp2;\r\n    tmpWave[i].monsterPaths = tmp;\r\n    setMobWave(tmpWave);\r\n  };\r\n\r\n  const clearPaths = (i) => {\r\n    let clearMonsterPath = new Array(9).fill(new Array(12).fill(0));\r\n    let paths = [];\r\n    let tmpWave = [...mobWave];\r\n    tmpWave[i].monsterPaths = clearMonsterPath;\r\n    tmpWave[i].paths = paths;\r\n    setMobWave(tmpWave);\r\n  };\r\n\r\n  const onClickAddNewWave = () => {\r\n    let tmpWave = [...mobWave];\r\n    tmpWave.push({\r\n      name: 'Enemy',\r\n      amount: 0,\r\n      interval: 0,\r\n      beginAt: 0,\r\n      paths: [],\r\n      monsterPaths: new Array(9).fill(new Array(12).fill(0)),\r\n    });\r\n    setMobWave(tmpWave);\r\n  };\r\n\r\n  const onClickRemoveWave = (i) => {\r\n    let tmpWave = [...mobWave];\r\n    let filtered = tmpWave.filter((value, index) => index !== i);\r\n    setMobWave(filtered);\r\n  };\r\n\r\n  const onEditingMobWave = (e, i) => {\r\n    let tmpWave = [...mobWave];\r\n    tmpWave[i][e.target.attributes.label.value] = e.target.value;\r\n    setMobWave(tmpWave);\r\n  };\r\n\r\n  const importData = () => {\r\n    const data = JSON.parse(importJson);\r\n    setTerrainData(\r\n      getTerrainData(data.terrainData, data.monsterGate, data.protectorStone)\r\n    );\r\n    data.mobWave.map((d) => {\r\n      d.monsterPaths = fillMonsterPath(d.paths);\r\n    });\r\n    setMobWave(data.mobWave);\r\n  };\r\n\r\n  const [importJson, setImportJson] = useState();\r\n\r\n  return (\r\n    <>\r\n      <Form {...layout} layout={'horizontal'} form={form} onFinish={onFinish}>\r\n        <Button onClick={importData}>Import</Button>\r\n        <TextArea\r\n          style={{ margin: 20 }}\r\n          onChange={(e) => setImportJson(e.target.value)}\r\n        ></TextArea>\r\n        <Form.Item label='Width' name='width'>\r\n          <Input placeholder={`Level's width`} />\r\n        </Form.Item>\r\n        <Form.Item label='Height' name='height'>\r\n          <Input placeholder={`Level's height`} />\r\n        </Form.Item>\r\n        <Form.Item label='Core' name='core'>\r\n          <Input placeholder={`Core's number`} />\r\n        </Form.Item>\r\n        <Form.Item label='Level Map' name='terrainData' {...attackLayout}>\r\n          <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n            <div>\r\n              {terrainData.map((d, i) => {\r\n                return (\r\n                  <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                    {d.map((data, k) => {\r\n                      let backgroundColor = colors[data];\r\n                      return (\r\n                        <div\r\n                          style={{\r\n                            ...styles.cell,\r\n                            backgroundColor,\r\n                          }}\r\n                          onClick={() => {\r\n                            onClickLevelRange(k, i);\r\n                          }}\r\n                        ></div>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n            <div style={{ marginLeft: 40, maxWidth: 200 }}>\r\n              <Radio.Group\r\n                onChange={(e) => setSelectedTerrain(parseInt(e.target.value))}\r\n              >\r\n                <Radio value='0'>\r\n                  {' '}\r\n                  <div\r\n                    style={{ ...styles.cell, backgroundColor: colors[0] }}\r\n                  ></div>\r\n                  Abyss\r\n                </Radio>\r\n                <Radio value='1'>\r\n                  {' '}\r\n                  <div\r\n                    style={{ ...styles.cell, backgroundColor: colors[1] }}\r\n                  ></div>\r\n                  Low Ground\r\n                </Radio>\r\n                <Radio value='3'>\r\n                  {' '}\r\n                  <div\r\n                    style={{ ...styles.cell, backgroundColor: colors[3] }}\r\n                  ></div>\r\n                  High Ground\r\n                </Radio>\r\n                <Radio value='5'>\r\n                  {' '}\r\n                  <div\r\n                    style={{ ...styles.cell, backgroundColor: colors[5] }}\r\n                  ></div>\r\n                  Wall\r\n                </Radio>\r\n                <Radio value='7'>\r\n                  {' '}\r\n                  <div\r\n                    style={{ ...styles.cell, backgroundColor: colors[7] }}\r\n                  ></div>\r\n                  Protector Stone\r\n                </Radio>\r\n                <Radio value='6'>\r\n                  {' '}\r\n                  <div\r\n                    style={{ ...styles.cell, backgroundColor: colors[6] }}\r\n                  ></div>\r\n                  Monster Gate\r\n                </Radio>\r\n              </Radio.Group>\r\n            </div>\r\n          </div>\r\n        </Form.Item>\r\n        <Form.Item label='Mob Waves' name='mobs' {...attackLayout}>\r\n          {mobWave.map((wave, i) => {\r\n            return (\r\n              <>\r\n                {' '}\r\n                <Title level={5}>Wave {i + 1}</Title>\r\n                <Form.Item label='Name'>\r\n                  <Input\r\n                    placeholder={`Monster's name`}\r\n                    label='name'\r\n                    onChange={(e) => onEditingMobWave(e, i)}\r\n                    value={wave.name}\r\n                  />\r\n                </Form.Item>\r\n                <Form.Item label='Amount'>\r\n                  <Input\r\n                    placeholder={`Amount`}\r\n                    label='amount'\r\n                    onChange={(e) => onEditingMobWave(e, i)}\r\n                    value={wave.amount}\r\n                  />\r\n                </Form.Item>\r\n                <Form.Item label='Interval'>\r\n                  <Input\r\n                    placeholder={`Interval`}\r\n                    label='interval'\r\n                    onChange={(e) => onEditingMobWave(e, i)}\r\n                    value={wave.interval}\r\n                  />\r\n                </Form.Item>\r\n                <Form.Item label='Begin At'>\r\n                  <Input\r\n                    placeholder={`Start`}\r\n                    label='beginAt'\r\n                    onChange={(e) => onEditingMobWave(e, i)}\r\n                    value={wave.beginAt}\r\n                  />\r\n                </Form.Item>\r\n                <Form.Item label='Paths'>\r\n                  {terrainData.map((d, y) => {\r\n                    return (\r\n                      <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                        {d.map((data, x) => {\r\n                          let backgroundColor = colors[data];\r\n                          return (\r\n                            <div\r\n                              style={{\r\n                                ...styles.cell,\r\n                                backgroundColor,\r\n                              }}\r\n                              onClick={() => {\r\n                                onClickMonsterPath(x, y, i);\r\n                              }}\r\n                            >\r\n                              {wave.monsterPaths[y][x] !== 0\r\n                                ? wave.monsterPaths[y][x]\r\n                                : undefined}\r\n                            </div>\r\n                          );\r\n                        })}\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </Form.Item>\r\n                <Button\r\n                  style={{ marginTop: 20 }}\r\n                  type='primary'\r\n                  onClick={() => {\r\n                    clearPaths(i);\r\n                  }}\r\n                >\r\n                  Clear\r\n                </Button>\r\n                {mobWave.length > 1 && (\r\n                  <Button\r\n                    style={{ marginTop: 20, marginLeft: 20 }}\r\n                    type='primary'\r\n                    onClick={() => {\r\n                      onClickRemoveWave(i);\r\n                    }}\r\n                  >\r\n                    Remove Wave\r\n                  </Button>\r\n                )}\r\n              </>\r\n            );\r\n          })}\r\n          <Form.Item>\r\n            <Button\r\n              style={{ marginTop: 20 }}\r\n              type='primary'\r\n              onClick={() => onClickAddNewWave()}\r\n            >\r\n              Add New Wave\r\n            </Button>\r\n          </Form.Item>\r\n        </Form.Item>\r\n        <Form.Item {...buttonItemLayout}>\r\n          <Button type='primary' htmlType='submit'>\r\n            Submit\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n      <TextArea value={JSON.stringify(levelJSON)} />\r\n    </>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  cell: {\r\n    width: 30,\r\n    height: 30,\r\n    borderWidth: 1,\r\n    backgroundColor: 'white',\r\n    border: '1px dashed rgba(1, 1, 1, .35)',\r\n    justifyContent: 'center',\r\n    textAlign: 'center',\r\n    cursor: 'default',\r\n  },\r\n};\r\n\r\nexport default LevelEditor;\r\n","import React from 'react';\r\nimport { Layout, Menu, Breadcrumb } from 'antd';\r\nimport { UserAddOutlined } from '@ant-design/icons';\r\nimport HeroGenerator from './pages/HeroGenerator';\r\nimport LevelEditor from './pages/LevelEditor';\r\n\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\n\r\nconst { Header, Content, Footer, Sider } = Layout;\r\n\r\nclass SiderDemo extends React.Component {\r\n  state = {\r\n    collapsed: false,\r\n  };\r\n\r\n  onCollapse = (collapsed) => {\r\n    console.log(collapsed);\r\n    this.setState({ collapsed });\r\n  };\r\n\r\n  render() {\r\n    const { collapsed } = this.state;\r\n    return (\r\n      <Router>\r\n        <Layout style={{ minHeight: '100vh' }}>\r\n          <Sider collapsible collapsed={collapsed} onCollapse={this.onCollapse}>\r\n            <div className='logo' />\r\n            <Menu theme='dark' defaultSelectedKeys={['1']} mode='inline'>\r\n              <Menu.Item key='1' icon={<UserAddOutlined />}>\r\n                <Link to='/create-hero'>Create Hero</Link>\r\n              </Menu.Item>\r\n              <Menu.Item key='2' icon={<UserAddOutlined />}>\r\n                <Link to='/create-level'>Level Editor</Link>\r\n              </Menu.Item>\r\n            </Menu>\r\n          </Sider>\r\n          <Layout className='site-layout'>\r\n            <Header className='site-layout-background' style={{ padding: 0 }} />\r\n            <Content style={{ margin: '0 16px' }}>\r\n              <Switch>\r\n                <Route path='/create-hero'>\r\n                  <Breadcrumb style={{ margin: '16px 0' }}>\r\n                    <Breadcrumb.Item>Create Hero</Breadcrumb.Item>\r\n                  </Breadcrumb>\r\n                  <div\r\n                    className='site-layout-background'\r\n                    style={{ padding: 24, minHeight: 360 }}\r\n                  >\r\n                    <HeroGenerator />\r\n                  </div>\r\n                </Route>\r\n                <Route path='/create-level'>\r\n                  <Breadcrumb style={{ margin: '16px 0' }}>\r\n                    <Breadcrumb.Item>Level Editor</Breadcrumb.Item>\r\n                  </Breadcrumb>\r\n                  <div\r\n                    className='site-layout-background'\r\n                    style={{ padding: 24, minHeight: 360 }}\r\n                  >\r\n                    <LevelEditor />\r\n                  </div>\r\n                </Route>\r\n                <Route path='/'>\r\n                  <Breadcrumb style={{ margin: '16px 0' }}>\r\n                    <Breadcrumb.Item>Create Hero</Breadcrumb.Item>\r\n                  </Breadcrumb>\r\n                  <div\r\n                    className='site-layout-background'\r\n                    style={{ padding: 24, minHeight: 360 }}\r\n                  >\r\n                    <HeroGenerator />\r\n                  </div>\r\n                </Route>\r\n              </Switch>\r\n            </Content>\r\n            <Footer style={{ textAlign: 'center' }}>\r\n              Nightmare Garden ©2021 Created by longmaba\r\n            </Footer>\r\n          </Layout>\r\n        </Layout>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SiderDemo;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport MainMenu from './MainMenu';\r\n\r\nconst App = () => <MainMenu />;\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}